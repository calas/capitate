#!/usr/bin/env ruby

require 'rubygems'
begin
  require 'newgem'
rescue LoadError
  puts "\n\nGenerating the website requires the newgem RubyGem"
  puts "Install: gem install newgem\n\n"
  exit(1)
end
require 'redcloth'
require 'syntax/convertors/html'
require 'erb'
require File.dirname(__FILE__) + '/../lib/capitate/version.rb'

version  = Capitate::VERSION::STRING
download = 'http://rubyforge.org/projects/capitate'

class Fixnum
  def ordinal
    # teens
    return 'th' if (10..19).include?(self % 100)
    # others
    case self % 10
    when 1: return 'st'
    when 2: return 'nd'
    when 3: return 'rd'
    else    return 'th'
    end
  end
end

class Time
  def pretty
    return "#{mday}#{mday.ordinal} #{strftime('%B')} #{year}"
  end
end

def convert_syntax(syntax, source)
  return Syntax::Convertors::HTML.for_syntax(syntax).convert(source).gsub(%r!^<pre>|</pre>$!,'')
end

if ARGV.length >= 3
  src_glob, template, output_dir = ARGV  
  src_files = Dir[src_glob]
else
  puts("Usage: #{File.split($0).last} path/to/source*.txt template.rhtml output_dir")
  exit!
end

template = ERB.new(File.open(template).read)

src_files.each do |src|
  title = nil
  body = nil
  File.open(src) do |fsrc|
    title_text = fsrc.readline
    body_text = fsrc.read
    syntax_items = []
    body_text.gsub!(%r!<(pre|code)[^>]*?syntax=['"]([^'"]+)[^>]*>(.*?)</\1>!m){
      ident = syntax_items.length
      element, syntax, source = $1, $2, $3
      syntax_items << "<#{element} class='syntax'>#{convert_syntax(syntax, source)}</#{element}>"
      "syntax-temp-#{ident}"
    }
    title = RedCloth.new(title_text).to_html.gsub(%r!<.*?>!,'').strip
    body = RedCloth.new(body_text).to_html
    body.gsub!(%r!(?:<pre><code>)?syntax-temp-(\d+)(?:</code></pre>)?!){ syntax_items[$1.to_i] }
  end
  stat = File.stat(src)
  created = stat.ctime
  modified = stat.mtime

  #$stdout << template.result(binding)
  output_file_path = src.split("/").last.gsub(/txt$/, "html")
  output_path = output_dir + "/" + output_file_path
  puts "    create #{output_path}"
  File.open(output_path, "w") { |file| file.puts template.result(binding) }
  
end